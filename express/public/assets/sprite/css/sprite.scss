/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$-pause-hover-name: 'PauseHover';
$-pause-hover-x: 42px;
$-pause-hover-y: 0px;
$-pause-hover-offset-x: -42px;
$-pause-hover-offset-y: 0px;
$-pause-hover-width: 14px;
$-pause-hover-height: 16px;
$-pause-hover-total-width: 56px;
$-pause-hover-total-height: 42px;
$-pause-hover-image: 'sprite.png';
$-pause-hover: (42px, 0px, -42px, 0px, 14px, 16px, 56px, 42px, 'sprite.png', 'PauseHover', );
$-pause-regular-name: 'PauseRegular';
$-pause-regular-x: 42px;
$-pause-regular-y: 16px;
$-pause-regular-offset-x: -42px;
$-pause-regular-offset-y: -16px;
$-pause-regular-width: 14px;
$-pause-regular-height: 16px;
$-pause-regular-total-width: 56px;
$-pause-regular-total-height: 42px;
$-pause-regular-image: 'sprite.png';
$-pause-regular: (42px, 16px, -42px, -16px, 14px, 16px, 56px, 42px, 'sprite.png', 'PauseRegular', );
$next-name: 'next';
$next-x: 0px;
$next-y: 0px;
$next-offset-x: 0px;
$next-offset-y: 0px;
$next-width: 21px;
$next-height: 21px;
$next-total-width: 56px;
$next-total-height: 42px;
$next-image: 'sprite.png';
$next: (0px, 0px, 0px, 0px, 21px, 21px, 56px, 42px, 'sprite.png', 'next', );
$next-hover-name: 'next_hover';
$next-hover-x: 21px;
$next-hover-y: 0px;
$next-hover-offset-x: -21px;
$next-hover-offset-y: 0px;
$next-hover-width: 21px;
$next-hover-height: 21px;
$next-hover-total-width: 56px;
$next-hover-total-height: 42px;
$next-hover-image: 'sprite.png';
$next-hover: (21px, 0px, -21px, 0px, 21px, 21px, 56px, 42px, 'sprite.png', 'next_hover', );
$prew-name: 'prew';
$prew-x: 0px;
$prew-y: 21px;
$prew-offset-x: 0px;
$prew-offset-y: -21px;
$prew-width: 21px;
$prew-height: 21px;
$prew-total-width: 56px;
$prew-total-height: 42px;
$prew-image: 'sprite.png';
$prew: (0px, 21px, 0px, -21px, 21px, 21px, 56px, 42px, 'sprite.png', 'prew', );
$prew-hover-name: 'prew_hover';
$prew-hover-x: 21px;
$prew-hover-y: 21px;
$prew-hover-offset-x: -21px;
$prew-hover-offset-y: -21px;
$prew-hover-width: 21px;
$prew-hover-height: 21px;
$prew-hover-total-width: 56px;
$prew-hover-total-height: 42px;
$prew-hover-image: 'sprite.png';
$prew-hover: (21px, 21px, -21px, -21px, 21px, 21px, 56px, 42px, 'sprite.png', 'prew_hover', );
$spritesheet-width: 56px;
$spritesheet-height: 42px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($-pause-hover, $-pause-regular, $next, $next-hover, $prew, $prew-hover, );
$spritesheet: (56px, 42px, 'sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
